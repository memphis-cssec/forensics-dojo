#!/opt/pwn.college/python
#!/usr/bin/env python3

import pathlib
import random
import hashlib
import tempfile
import subprocess
import sys

global flag

welcomemsg = """ WELCOME! 
We'll fool around with filesystems! ;)
You will have to create, parse, recover and reason deeply for various
properties of filesystems. Tools you may want to use for this module are : 
dd, fdisk, sleuthkit, extundelete, scalpel, autopsy and more. 
Good luck!
"""

config = (pathlib.Path(__file__).parent / ".config").read_text()
level = int(config)

with open("/flag") as f:
    buf=f.read()
    random.seed(buf)
    flag = str(buf)


def md5_file(file_name):
    with open(file_name, "rb") as f:
        file_contents = f.read()
        md5_hash = hashlib.md5(file_contents).hexdigest()
        return md5_hash

def check(res):
    if res == True:
        print(f"\nCongrats! Here is your flag:{flag}")
    else:
        print("\nTry again")

def hashinputagainst(hash):
    userinp = sys.stdin.buffer.read(32*1024*1024) # 32mb max
    maybe = hashlib.md5(userinp).hexdigest()
    check(maybe==hash)

def level1(): 
    rsize = random.randint(1,10)
    print(f"using dd, please create a file of size {rsize} MB containing zeros")
    print("when you are ready, pass it to my stdin")
    tf = tempfile.NamedTemporaryFile()
    subprocess.run(["dd", "if=/dev/zero", f"of={tf.name}", "bs=1M", f"count={rsize}"], stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL)
    tf.flush()
    correct = md5_file(tf.name)
    tf.close()
    hashinputagainst(correct)

def level2():
    ravensum = "8cca7b05f369ad88b406cf6f9beb80a7"
    maybe = input("what is the md5sum of the raven.dd file?").strip()
    check(maybe==ravensum)

def level3():
    mbrsum = "ad3cbb5d5a68aa03cb4a989361be967a"
    print("using dd, please carve out the master boot record of the raven.dd file")
    print("when you are ready, pass it to my stdin")
    hashinputagainst(mbrsum)

def level4():
    winsum = "31fc7951d9d5ff49d1ccc58742b967e0"
    print("using dd, please carve out the first partition of the raven.dd file")
    print("when you are ready, pass it to my stdin")
    hashinputagainst(winsum)

def level5():
    fat1sum = "4f53e2f3628bd1897f2be8c67f6607cf"
    print("from the first partition of the raven.dd get the first file allocation table file")
    print("when you are ready, pass it to my stdin")
    hashinputagainst(fat1sum)

def level6():
    namesum = "8b114b3595fb581f78cdd48afaf3f7b9"
    maybe = input("what is the name of the student who has disappeared? (all lowercase)").strip()
    check(maybe==namesum)

def level7():
    foolsum = "3c1dc840f2162092ddd51d010a63dd5c"
    print("in the first partition of the raven.dd there seems to be an image named fool.jpg. can you recover it?")
    print("when you are ready, pass it to my stdin")
    hashinputagainst(foolsum)

def level8():
    selfsum = "f648134b07479b0bcaaa3420d0e1e143"
    print("in the first partition of the raven.dd there might be an image of the victim. can you recover it?")
    print("when you are ready, pass it to my stdin")
    hashinputagainst(selfsum)

def level9():
    keysum = "e6b0a3a6d1e96a19bf0f757e496d1c63"
    print("in the first partition of the raven.dd there might be a keyfile for some sort of encryption. can you recover it?")
    print("when you are ready, pass it to my stdin")
    hashinputagainst(keysum)

def level10():
    flagsum = "de8453a0335042ce4301ed3d9759bfa9"
    print("the final flag. should be of the form \memphisforensics{...}.can you discover it?")
    maybe = input("flag>").strip()
    check(maybe==flagsum)

def challenge():
    lvls = {
       1: level1,
       2: level2,
       3: level3,
       4: level4,
       5: level5,
       6: level6,
       7: level7,
       8: level8,
       9: level9,
       10: level10,
    }
    print(welcomemsg)
    f = lvls[level]
    f()

challenge()
