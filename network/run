#!/usr/bin/env python-dojo-suid

import pathlib
import random
import hashlib
import tempfile
import subprocess
import sys

global flag

welcomemsg = """ WELCOME! 
Dear Pen Tester,

We have a problem here at robocat industries, and we need your help. We have reasons to believe that one of our employees, Alyssa P. Hacker, managed 
to smuggle out some initial designs of the CatZilla and MechaCatzilla city-leveling line, feline robots, that we plan to release next year.

All we have is a network trace from her computer. Can you discover what she was doing? 
Any chance that you can find evidence if and what she might have taken from our servers? 
(we only host sensitive data behind secure authentication servers! how did she even do it?) 
Can you discover if she sent the data somewhere to a third party?

Please help us Pen Tester, You are our only hope.
"""

config = (pathlib.Path(__file__).parent / ".config").read_text()
level = int(config)
pcap = "/data/alyssa.pcap"

with open("/flag") as f:
    buf=f.read()
    random.seed(buf)
    flag = str(buf)

def md5_file(file_name):
    with open(file_name, "rb") as f:
        file_contents = f.read()
        md5_hash = hashlib.md5(file_contents).hexdigest()
        return md5_hash

def check(res):
    if res == True:
        print(f"\nCongrats! Here is your flag:{flag}")
    else:
        print("\nTry again")

def hashinputagainst(hash):
    userinp = sys.stdin.buffer.read(32*1024*1024) # 32mb max
    maybe = hashlib.md5(userinp).hexdigest()
    check(maybe==hash)

def level1(): 
    lvl1sum = "f1721128529f7774d385347db7dca58b"
    print(f"in the pcap {pcap} search for the string 'robocat'. Find the first packet, which should have an HTTP payload. In there there is a title tag. Input it with the tag like <title> something </title> below")
    userinp = input("title>").strip()
    maybe = hashlib.md5(userinp.encode('utf-8')).hexdigest()
    check(maybe==lvl1sum)

def level2():
    lvl2sum = "cdef733a6406c88552b867aa78c479aa"
    print(f"in the pcap {pcap} and in the previous packet, she might have discovereda combination of ip:port that leads to a protected location. Input that host:port combination below.")
    userinp = input("host:port>").strip()
    maybe = hashlib.md5(userinp.encode('utf-8')).hexdigest()
    check(maybe==lvl2sum)

def level3():
    lvl3sum = "5a091467e705bebf0222507ab0442b86"
    print(f"in the pcap {pcap} when she connects to that port initially, she receives a HTTP 401 unauthorized response.  Take that packet and export is as a base64 string. Input it below.")
    userinp = input("base64 packet>").strip()
    maybe = hashlib.md5(userinp.encode('utf-8')).hexdigest()
    check(maybe==lvl3sum)

def level4():
    lvl4sum = "537e19068d6c56443cb98718085f5f6f"
    print(f"in the pcap {pcap}, she provided some credentials to that server. Input them here, as username:password")
    userinp = input("creds>").strip()
    maybe = hashlib.md5(userinp.encode('utf-8')).hexdigest()
    check(maybe==lvl4sum)

def level5():
    lvl5sum = "272495f692754c96aca9b5899d0a8d2a"
    print(f"in the pcap {pcap}, you can see that from that flow, she downloaded a .zip file. Export it and pass it to our stdin")
    print(".zip file>")
    hashinputagainst(lvl5sum)

def level6():
    lvl6sum = "375c439e01952bb469b3ec6b13a32dbc"
    print(f"in the pcap {pcap}, you can discover that she has used a service to probably contact someone. Using what you have discovered till now, think outside the box and find the recipient of the stolen designs!")
    userinp = input("email>").strip()
    maybe = hashlib.md5(userinp.encode('utf-8')).hexdigest()
    check(maybe==lvl6sum)

def challenge():
    lvls = {
       1: level1,
       2: level2,
       3: level3,
       4: level4,
       5: level5,
       6: level6,
    }
    print(welcomemsg)
    f = lvls[level]
    f()

challenge()
